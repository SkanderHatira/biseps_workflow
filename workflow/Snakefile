include: "rules/common.smk"
include: "rules/trimmomatic.smk"
include: "rules/subsample.smk"
include: "rules/quality.smk"
include: "rules/genome_preparation.smk"
include: "rules/align.smk"
include: "rules/methylation_extraction.smk"
include: "rules/methylation_calling.smk"

# report template
report: "report/workflow.rst"

def all_input(wildcards):
	"""
	Function defining all requested inputs for the rule all (below).
	"""

	wanted_input = []
	# Genome_preparation
	if is_activated(config["steps"]["genome_preparation"]):
		wanted_input.extend(
				expand(
					[
						config['resources']['ref']['genome_directory'] + "/genomic_nucleotide_frequencies.txt"

					],
					unit=get_unit(),

				)	
			)
	# Quality report
	if is_activated(config["steps"]["quality"]):
		wanted_input.extend(
				expand(
					[
						"results/quality/multiqc/{unit.sample}{unit.lane}{unit.techrep}-{unit.biorep}/multiqc_report.html",

					],
					unit=get_unit(),

				)
			)
	# Bismark methylation extraction report 
	if is_activated(config["steps"]["methylation_extraction_bismark"]):
		wanted_input.extend(
			expand(
				[
					"results/methylation_extraction_bismark/{unit.sample}{unit.techrep}-{unit.biorep}/{unit.sample}{unit.techrep}-{unit.biorep}_merged.deduplicated.CX_report.txt"
				] ,
				unit=get_merged(),
			)
		)
	# Bsmap methylation extraction report 
	if is_activated(config["steps"]["methylation_extraction_bismark"]):
		wanted_input.extend(
			expand(
				[
					"results/methylation_extraction_bsmap/{unit.sample}{unit.techrep}-{unit.biorep}/{unit.sample}{unit.techrep}-{unit.biorep}_bsmap_report.txt"
				] ,
				unit=get_merged(),
			)
		)
	if is_activated(config["steps"]["methylation_extraction_bismark"]):
		wanted_input.extend(
			expand(
				[
					"results/methylation_extraction_bsmap/{unit.sample}{unit.techrep}-{unit.biorep}/{unit.sample}{unit.techrep}-{unit.biorep}_bsmap_CX_report.txt"
				] ,
				unit=get_merged(),
			)
		)
	# Methylation calling with DMRCaller for all pairwise comparisons control(s) vs treatment(s)
	if is_activated(config["steps"]["methylation_calling"]):	
		wanted_input.extend(
			expand(
				[
					"results/methylation_calling/comparison/{control.sample}{control.techrep}_vs_{treatment.sample}{treatment.techrep}.Rdata"
				] ,
				control=get_control(),
				treatment=get_treatment()
			)
		)
	return wanted_input

rule all:
	input: all_input

