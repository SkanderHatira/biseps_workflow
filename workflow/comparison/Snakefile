from snakemake.utils import validate
import pandas as pd
outdir = config['general']['outdir']
include: "../rules/computeDmrs.smk"
validate(config, schema="../schemas/comparison.config.schema.yaml")

comparisons = pd.read_csv(config["comparisons"], dtype=str, sep="\t").set_index(["id",], drop=False)
context = config["params"]["context"]


wildcard_constraints:
	id="|".join(comparisons["id"]),
	
	
def get_CX_reports(wildcards):
	u = comparisons.loc[ wildcards.id, ["control", "treatment"] ].dropna()
	return { 'control' : u.control.split(",") , 'treatment' : u.treatment.split(",") }
def get_id():
	return comparisons["id"].unique()

# report template
def all_input(wildcards):
	"""
	Function defining all requested inputs for the rule all (below).
	"""
	

	wanted_input = []

	wanted_input.extend(
		expand(
			[

			outdir+"methylkit_results/{id}-{context}/{id}-{context}-methylation-stats.txt",
			outdir+"methylkit_results/{id}-{context}/{id}-{context}-coverage-stats.pdf",
			] ,
			id=get_id(),
			context=context
		)
	)
	if config['resources']['annot'] != "":
		wanted_input.extend(
			expand(
				[
				outdir+"methylkit_results/{id}-{context}/{id}-{context}-overallMethylation.bed.gz",
				outdir+"methylkit_results/{id}-{context}/{id}-{context}-overallMethylation-closest.bed.gz",
				] ,
				id=get_id(),
				context=context
			)
		)
	return wanted_input
rule all:
	input: all_input
	output:
		outdir+"comparison.lock"	
	resources:
		cpus= 1,
		mem_mb=2000,
	shell:
		"touch {output}"
